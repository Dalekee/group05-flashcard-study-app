warning: in the working copy of 'Pipfile', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/Pipfile b/Pipfile[m
[1mindex 4948bf9..d4ae88c 100644[m
[1m--- a/Pipfile[m
[1m+++ b/Pipfile[m
[36m@@ -1,8 +1,18 @@[m
 [[source]][m
 url = "https://pypi.org/simple"[m
 verify_ssl = true[m
[32m+[m[32mname = "pypi"[m
 [m
[31m-[requires][m
[31m-python_version = "3.11"[m
[32m+[m[32m[packages][m
[32m+[m[32mrequests = "*"[m
[32m+[m[32mpytest = "*"[m
[32m+[m[32mpysimplegui = "*"[m
 [m
 [dev-packages][m
[32m+[m[32mname = "pypi"[m
[32m+[m[32mpytest = "*"[m
[32m+[m
[32m+[m[32m[requires][m
[32m+[m[32mpython_version = "3.13"[m
[41m+[m
[41m+[m
[1mdiff --git a/README.md b/README.md[m
[1mindex e2d9515..b3e6da4 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -107,8 +107,5 @@[m [mFeel free to fork the repository and contribute to this project. All suggestions[m
 ## ‚úíÔ∏è Credits[m
 [m
 * **Project Lead**: [Your GitHub Username][m
[31m-* **Collaborations**: [Your Partner's GitHub Username][m
[31m-* **Collaborations**: [Your Partner's GitHub Username][m
[31m-* **Collaborations**: [Your Partner's GitHub Username][m
[31m-* **Collaborations**: [Your Partner's GitHub Username][m
[32m+[m[32m* **Collaboration**: [Your Partner's GitHub Username][m
 * **Special Thanks**: To the community for the guidance and resources that made this project possible.[m
\ No newline at end of file[m
[1mdiff --git a/data/Animals.json b/data/Animals.json[m
[1mdeleted file mode 100644[m
[1mindex 1bf44ac..0000000[m
[1m--- a/data/Animals.json[m
[1m+++ /dev/null[m
[36m@@ -1,9 +0,0 @@[m
[31m-{[m
[31m-    "name": "Animals",[m
[31m-    "cards": [[m
[31m-        {[m
[31m-            "front": "What is the largest animal on land?",[m
[31m-            "back": "Elephant"[m
[31m-        }[m
[31m-    ][m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/data/Science.json b/data/Science.json[m
[1mdeleted file mode 100644[m
[1mindex e07c507..0000000[m
[1m--- a/data/Science.json[m
[1m+++ /dev/null[m
[36m@@ -1,20 +0,0 @@[m
[31m-{[m
[31m-    "name": "Science",[m
[31m-    "cards": [[m
[31m-        {[m
[31m-            "front": "How old is Ahmad",[m
[31m-            "back": "1000",[m
[31m-            "difficulty": 3[m
[31m-        },[m
[31m-        {[m
[31m-            "front": "What is the capital of France?",[m
[31m-            "back": "Paris",[m
[31m-            "difficulty": 2[m
[31m-        },[m
[31m-        {[m
[31m-            "front": "What is H2O?",[m
[31m-            "back": "Water",[m
[31m-            "difficulty": 1[m
[31m-        }[m
[31m-    ][m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/src/flashcard_app.py b/src/flashcard_app.py[m
[1mdeleted file mode 100644[m
[1mindex 4fe778b..0000000[m
[1m--- a/src/flashcard_app.py[m
[1m+++ /dev/null[m
[36m@@ -1,102 +0,0 @@[m
[31m-import json[m
[31m-import os[m
[31m-[m
[31m-class Card:[m
[31m-    """Represents a single flashcard with a front and back."""[m
[31m-    def __init__(self, front: str, back: str):[m
[31m-        self.front = front[m
[31m-        self.back = back[m
[31m-[m
[31m-    def __repr__(self):[m
[31m-        return f"Card(front='{self.front}', back='{self.back}')"[m
[31m-[m
[31m-    def to_dict(self):[m
[31m-        """Converts the Card object to a dictionary for serialization."""[m
[31m-        return {'front': self.front, 'back': self.back}[m
[31m-[m
[31m-[m
[31m-[m
[31m-class Deck:[m
[31m-    """Manages a collection of Card objects."""[m
[31m-    def __init__(self, name: str):[m
[31m-        self.name = name[m
[31m-        self.cards = [][m
[31m-[m
[31m-    def add_card(self, card: Card):[m
[31m-        """Adds a Card object to the deck."""[m
[31m-        self.cards.append(card)[m
[31m-[m
[31m-    def to_dict(self):[m
[31m-        """Converts the Deck and its Cards to a dictionary."""[m
[31m-        return {[m
[31m-            'name': self.name,[m
[31m-            'cards': [card.to_dict() for card in self.cards][m
[31m-        }[m
[31m-[m
[31m-    @classmethod[m
[31m-    def from_dict(cls, deck_dict):[m
[31m-        """Creates a Deck object from a dictionary."""[m
[31m-        deck = cls(name=deck_dict['name'])[m
[31m-        deck.cards = [Card(card['front'], card['back']) for card in deck_dict['cards']][m
[31m-        return deck[m
[31m-[m
[31m-    def save_deck(deck: Deck):[m
[31m-        """Saves a Deck object to a JSON file."""[m
[31m-        # This line checks if a directory named 'data' exists.[m
[31m-        if not os.path.exists('data'):[m
[31m-            # If the 'data' directory does not exist, this line creates it.[m
[31m-            # This is important to ensure we have a place to save our files.[m
[31m-            os.makedirs('data')[m
[31m-        # os.path.join intelligently combines path components, making the code work on any operating system.[m
[31m-        # It creates the full path to the file, e.g., 'data/Science.json'.[m
[31m-        filename = os.path.join('data', f'{deck.name}.json')[m
[31m-        # The 'with open(...) as f:' block opens the file for writing ('w').[m
[31m-        # It ensures the file is automatically closed, even if errors occur.[m
[31m-        with open(filename, 'w') as f:[m
[31m-            # json.dump() serializes a Python object (the dictionary from deck.to_dict())[m
[31m-            # and writes it to the file. 'indent=4' makes the JSON file human-readable.[m
[31m-            json.dump(deck.to_dict(), f, indent=4)[m
[31m-        print(f"Deck '{deck.name}' saved successfully to '{filename}'.")[m
[31m-[m
[31m-    def load_deck(name: str):[m
[31m-        """Loads a Deck object from a JSON file."""[m
[31m-        # This line constructs the expected filename for the deck.[m
[31m-        filename = os.path.join('data', f'{name}.json')[m
[31m-        # The 'try...except' block is for error handling. It's used to gracefully handle[m
[31m-        # the case where the specified deck file does not exist.[m
[31m-        try:[m
[31m-            # This opens the file for reading ('r').[m
[31m-            with open(filename, 'r') as f:[m
[31m-                # json.load() deserializes the JSON data from the file back into a Python dictionary.[m
[31m-                deck_dict = json.load(f)[m
[31m-                # The Deck.from_dict() class method reconstructs the Deck object from the dictionary.[m
[31m-                return Deck.from_dict(deck_dict)[m
[31m-        # If the file is not found, the code inside this 'except' block will be executed.[m
[31m-        except FileNotFoundError:[m
[31m-            print(f"Error: Deck '{name}' not found.")[m
[31m-            return None[m
[31m-[m
[31m-    if __name__ == "__main__":[m
[31m-        # This section serves as a test to verify that the save and load functions work correctly.[m
[31m-        # It creates a sample Deck object.[m
[31m-        my_deck = Deck(name="Science")[m
[31m-        # Adds two Card objects to the deck.[m
[31m-        my_deck.add_card(Card("What is the capital of France?", "Paris"))[m
[31m-        my_deck.add_card(Card("What is H2O?", "Water"))[m
[31m-[m
[31m-        # Calls the save_deck function to save the created deck.[m
[31m-        save_deck(my_deck)[m
[31m-[m
[31m-        # Calls the load_deck function to load the deck we just saved.[m
[31m-        loaded_deck = load_deck("Science")[m
[31m-[m
[31m-        # This checks if the loaded_deck is not None (i.e., the load was successful).[m
[31m-        if loaded_deck:[m
[31m-            print("\n--- Loaded Deck Details ---")[m
[31m-            # Prints details of the loaded deck to confirm data integrity.[m
[31m-            print(f"Deck Name: {loaded_deck.name}")[m
[31m-            print(f"Number of cards: {len(loaded_deck.cards)}")[m
[31m-            print("Cards:")[m
[31m-            # Loops through and prints the details of each card in the loaded deck.[m
[